
SimulationBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005600  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800580c  0800580c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005814  08005814  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800581c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000178  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010490  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002056  00000000  00000000  0003055f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd0  00000000  00000000  000325b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c9b  00000000  00000000  00033588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020c2d  00000000  00000000  00034223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012c4a  00000000  00000000  00054e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cada7  00000000  00000000  00067a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004434  00000000  00000000  00132844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00136c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005770 	.word	0x08005770

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005770 	.word	0x08005770

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MotorX_Read>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void MotorX_Read(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == 1)
 80004c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004cc:	4835      	ldr	r0, [pc, #212]	; (80005a4 <MotorX_Read+0xe0>)
 80004ce:	f001 fb11 	bl	8001af4 <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d12e      	bne.n	8000536 <MotorX_Read+0x72>
			&& (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 0)) {
 80004d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004dc:	4831      	ldr	r0, [pc, #196]	; (80005a4 <MotorX_Read+0xe0>)
 80004de:	f001 fb09 	bl	8001af4 <HAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d126      	bne.n	8000536 <MotorX_Read+0x72>
		HAL_UART_Transmit(&huart2, (uint8_t*) "X FORWARD \n", 11, 1000);
 80004e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ec:	220b      	movs	r2, #11
 80004ee:	492e      	ldr	r1, [pc, #184]	; (80005a8 <MotorX_Read+0xe4>)
 80004f0:	482e      	ldr	r0, [pc, #184]	; (80005ac <MotorX_Read+0xe8>)
 80004f2:	f004 fd9c 	bl	800502e <HAL_UART_Transmit>
		if (ACC_Xangle != 360)
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <MotorX_Read+0xec>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80004fe:	d005      	beq.n	800050c <MotorX_Read+0x48>
			ACC_Xangle++;
 8000500:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <MotorX_Read+0xec>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	b29a      	uxth	r2, r3
 8000508:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <MotorX_Read+0xec>)
 800050a:	801a      	strh	r2, [r3, #0]
		if (ACC_Xangle == 360)
 800050c:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <MotorX_Read+0xec>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000514:	d102      	bne.n	800051c <MotorX_Read+0x58>
			ACC_Xangle = 0;
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <MotorX_Read+0xec>)
 8000518:	2200      	movs	r2, #0
 800051a:	801a      	strh	r2, [r3, #0]

		i2cAcc[0] = ACC_Xangle >> 8;
 800051c:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <MotorX_Read+0xec>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <MotorX_Read+0xf0>)
 8000528:	701a      	strb	r2, [r3, #0]
		i2cAcc[1] = (uint8_t) ACC_Xangle;
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <MotorX_Read+0xec>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <MotorX_Read+0xf0>)
 8000532:	705a      	strb	r2, [r3, #1]
		i2cAcc[0] = ACC_Xangle >> 8;
		i2cAcc[1] = (uint8_t) ACC_Xangle;
	} else {

	}
}
 8000534:	e034      	b.n	80005a0 <MotorX_Read+0xdc>
	} else if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == 0)
 8000536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053a:	481a      	ldr	r0, [pc, #104]	; (80005a4 <MotorX_Read+0xe0>)
 800053c:	f001 fada 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d12c      	bne.n	80005a0 <MotorX_Read+0xdc>
			&& (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 1)) {
 8000546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054a:	4816      	ldr	r0, [pc, #88]	; (80005a4 <MotorX_Read+0xe0>)
 800054c:	f001 fad2 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b01      	cmp	r3, #1
 8000554:	d124      	bne.n	80005a0 <MotorX_Read+0xdc>
		HAL_UART_Transmit(&huart2, (uint8_t*) "X BACK  \n", 11, 1000);
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	220b      	movs	r2, #11
 800055c:	4916      	ldr	r1, [pc, #88]	; (80005b8 <MotorX_Read+0xf4>)
 800055e:	4813      	ldr	r0, [pc, #76]	; (80005ac <MotorX_Read+0xe8>)
 8000560:	f004 fd65 	bl	800502e <HAL_UART_Transmit>
		if (ACC_Xangle != 0)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MotorX_Read+0xec>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d005      	beq.n	8000578 <MotorX_Read+0xb4>
			ACC_Xangle--;
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MotorX_Read+0xec>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MotorX_Read+0xec>)
 8000576:	801a      	strh	r2, [r3, #0]
		if (ACC_Xangle == 0)
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <MotorX_Read+0xec>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d103      	bne.n	8000588 <MotorX_Read+0xc4>
			ACC_Xangle = 360;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MotorX_Read+0xec>)
 8000582:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000586:	801a      	strh	r2, [r3, #0]
		i2cAcc[0] = ACC_Xangle >> 8;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MotorX_Read+0xec>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	b29b      	uxth	r3, r3
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <MotorX_Read+0xf0>)
 8000594:	701a      	strb	r2, [r3, #0]
		i2cAcc[1] = (uint8_t) ACC_Xangle;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MotorX_Read+0xec>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <MotorX_Read+0xf0>)
 800059e:	705a      	strb	r2, [r3, #1]
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000
 80005a8:	08005788 	.word	0x08005788
 80005ac:	20000170 	.word	0x20000170
 80005b0:	200001c6 	.word	0x200001c6
 80005b4:	20000004 	.word	0x20000004
 80005b8:	08005794 	.word	0x08005794

080005bc <MotorY_Read>:
void MotorY_Read(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 1)
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	4835      	ldr	r0, [pc, #212]	; (800069c <MotorY_Read+0xe0>)
 80005c6:	f001 fa95 	bl	8001af4 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d12e      	bne.n	800062e <MotorY_Read+0x72>
			&& (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == 0)) {
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	4831      	ldr	r0, [pc, #196]	; (800069c <MotorY_Read+0xe0>)
 80005d6:	f001 fa8d 	bl	8001af4 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d126      	bne.n	800062e <MotorY_Read+0x72>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Y FORWARD \n", 11, 1000);
 80005e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e4:	220b      	movs	r2, #11
 80005e6:	492e      	ldr	r1, [pc, #184]	; (80006a0 <MotorY_Read+0xe4>)
 80005e8:	482e      	ldr	r0, [pc, #184]	; (80006a4 <MotorY_Read+0xe8>)
 80005ea:	f004 fd20 	bl	800502e <HAL_UART_Transmit>
		if (ACC_Yangle != 360)
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <MotorY_Read+0xec>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80005f6:	d005      	beq.n	8000604 <MotorY_Read+0x48>
			ACC_Yangle++;
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MotorY_Read+0xec>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MotorY_Read+0xec>)
 8000602:	801a      	strh	r2, [r3, #0]
		if (ACC_Yangle == 360)
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <MotorY_Read+0xec>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800060c:	d102      	bne.n	8000614 <MotorY_Read+0x58>
			ACC_Yangle = 0;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MotorY_Read+0xec>)
 8000610:	2200      	movs	r2, #0
 8000612:	801a      	strh	r2, [r3, #0]

		i2cAcc[2] = ACC_Yangle >> 8;
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MotorY_Read+0xec>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	b29b      	uxth	r3, r3
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MotorY_Read+0xf0>)
 8000620:	709a      	strb	r2, [r3, #2]
		i2cAcc[3] = (uint8_t) ACC_Yangle;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MotorY_Read+0xec>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MotorY_Read+0xf0>)
 800062a:	70da      	strb	r2, [r3, #3]
		i2cAcc[2] = ACC_Yangle >> 8;
		i2cAcc[3] = (uint8_t) ACC_Yangle;
	} else {

	}
}
 800062c:	e034      	b.n	8000698 <MotorY_Read+0xdc>
	} else if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == 0)
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	481a      	ldr	r0, [pc, #104]	; (800069c <MotorY_Read+0xe0>)
 8000634:	f001 fa5e 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d12c      	bne.n	8000698 <MotorY_Read+0xdc>
			&& (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == 1)) {
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4816      	ldr	r0, [pc, #88]	; (800069c <MotorY_Read+0xe0>)
 8000644:	f001 fa56 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d124      	bne.n	8000698 <MotorY_Read+0xdc>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Y BACK  \n", 11, 1000);
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	220b      	movs	r2, #11
 8000654:	4916      	ldr	r1, [pc, #88]	; (80006b0 <MotorY_Read+0xf4>)
 8000656:	4813      	ldr	r0, [pc, #76]	; (80006a4 <MotorY_Read+0xe8>)
 8000658:	f004 fce9 	bl	800502e <HAL_UART_Transmit>
		if (ACC_Yangle != 0)
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MotorY_Read+0xec>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d005      	beq.n	8000670 <MotorY_Read+0xb4>
			ACC_Yangle--;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MotorY_Read+0xec>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	3b01      	subs	r3, #1
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MotorY_Read+0xec>)
 800066e:	801a      	strh	r2, [r3, #0]
		if (ACC_Yangle == 0)
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MotorY_Read+0xec>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <MotorY_Read+0xc4>
			ACC_Yangle = 360;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MotorY_Read+0xec>)
 800067a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800067e:	801a      	strh	r2, [r3, #0]
		i2cAcc[2] = ACC_Yangle >> 8;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MotorY_Read+0xec>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MotorY_Read+0xf0>)
 800068c:	709a      	strb	r2, [r3, #2]
		i2cAcc[3] = (uint8_t) ACC_Yangle;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MotorY_Read+0xec>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MotorY_Read+0xf0>)
 8000696:	70da      	strb	r2, [r3, #3]
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	080057a0 	.word	0x080057a0
 80006a4:	20000170 	.word	0x20000170
 80006a8:	2000000a 	.word	0x2000000a
 80006ac:	20000004 	.word	0x20000004
 80006b0:	080057ac 	.word	0x080057ac

080006b4 <MotorZ_Read>:
void MotorZ_Read(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14) == 1)
 80006b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006bc:	4835      	ldr	r0, [pc, #212]	; (8000794 <MotorZ_Read+0xe0>)
 80006be:	f001 fa19 	bl	8001af4 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d12e      	bne.n	8000726 <MotorZ_Read+0x72>
			&& (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15) == 0)) {
 80006c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006cc:	4831      	ldr	r0, [pc, #196]	; (8000794 <MotorZ_Read+0xe0>)
 80006ce:	f001 fa11 	bl	8001af4 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d126      	bne.n	8000726 <MotorZ_Read+0x72>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Z FORWARD \n", 11, 1000);
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	220b      	movs	r2, #11
 80006de:	492e      	ldr	r1, [pc, #184]	; (8000798 <MotorZ_Read+0xe4>)
 80006e0:	482e      	ldr	r0, [pc, #184]	; (800079c <MotorZ_Read+0xe8>)
 80006e2:	f004 fca4 	bl	800502e <HAL_UART_Transmit>
		if (ACC_Zangle != 360)
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <MotorZ_Read+0xec>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80006ee:	d005      	beq.n	80006fc <MotorZ_Read+0x48>
			ACC_Zangle++;
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <MotorZ_Read+0xec>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <MotorZ_Read+0xec>)
 80006fa:	801a      	strh	r2, [r3, #0]
		if (ACC_Zangle == 360)
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <MotorZ_Read+0xec>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000704:	d102      	bne.n	800070c <MotorZ_Read+0x58>
			ACC_Zangle = 0;
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MotorZ_Read+0xec>)
 8000708:	2200      	movs	r2, #0
 800070a:	801a      	strh	r2, [r3, #0]

		i2cAcc[4] = ACC_Zangle >> 8;
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MotorZ_Read+0xec>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	b29b      	uxth	r3, r3
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MotorZ_Read+0xf0>)
 8000718:	711a      	strb	r2, [r3, #4]
		i2cAcc[5] = (uint8_t) ACC_Zangle;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MotorZ_Read+0xec>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MotorZ_Read+0xf0>)
 8000722:	715a      	strb	r2, [r3, #5]
		i2cAcc[4] = ACC_Zangle >> 8;
		i2cAcc[5] = (uint8_t) ACC_Zangle;
	} else {

	}
}
 8000724:	e034      	b.n	8000790 <MotorZ_Read+0xdc>
	} else if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14) == 0)
 8000726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072a:	481a      	ldr	r0, [pc, #104]	; (8000794 <MotorZ_Read+0xe0>)
 800072c:	f001 f9e2 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d12c      	bne.n	8000790 <MotorZ_Read+0xdc>
			&& (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15) == 1)) {
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <MotorZ_Read+0xe0>)
 800073c:	f001 f9da 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d124      	bne.n	8000790 <MotorZ_Read+0xdc>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Z BACK  \n", 11, 1000);
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	220b      	movs	r2, #11
 800074c:	4916      	ldr	r1, [pc, #88]	; (80007a8 <MotorZ_Read+0xf4>)
 800074e:	4813      	ldr	r0, [pc, #76]	; (800079c <MotorZ_Read+0xe8>)
 8000750:	f004 fc6d 	bl	800502e <HAL_UART_Transmit>
		if (ACC_Zangle != 0)
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MotorZ_Read+0xec>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d005      	beq.n	8000768 <MotorZ_Read+0xb4>
			ACC_Zangle--;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MotorZ_Read+0xec>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MotorZ_Read+0xec>)
 8000766:	801a      	strh	r2, [r3, #0]
		if (ACC_Zangle == 0)
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MotorZ_Read+0xec>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d103      	bne.n	8000778 <MotorZ_Read+0xc4>
			ACC_Zangle = 360;
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MotorZ_Read+0xec>)
 8000772:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000776:	801a      	strh	r2, [r3, #0]
		i2cAcc[4] = ACC_Zangle >> 8;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MotorZ_Read+0xec>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	b29b      	uxth	r3, r3
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MotorZ_Read+0xf0>)
 8000784:	711a      	strb	r2, [r3, #4]
		i2cAcc[5] = (uint8_t) ACC_Zangle;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MotorZ_Read+0xec>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <MotorZ_Read+0xf0>)
 800078e:	715a      	strb	r2, [r3, #5]
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	080057b8 	.word	0x080057b8
 800079c:	20000170 	.word	0x20000170
 80007a0:	2000000c 	.word	0x2000000c
 80007a4:	20000004 	.word	0x20000004
 80007a8:	080057c4 	.word	0x080057c4

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fd68 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f8c8 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 faa2 	bl	8000d00 <MX_GPIO_Init>
  MX_DAC_Init();
 80007bc:	f000 f92e 	bl	8000a1c <MX_DAC_Init>
  MX_TIM4_Init();
 80007c0:	f000 f9dc 	bl	8000b7c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80007c4:	f000 fa72 	bl	8000cac <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80007c8:	f000 f95c 	bl	8000a84 <MX_I2C2_Init>
  MX_TIM3_Init();
 80007cc:	f000 f988 	bl	8000ae0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_EnableListen_IT(&hi2c2);
 80007d0:	484c      	ldr	r0, [pc, #304]	; (8000904 <main+0x158>)
 80007d2:	f001 fbd1 	bl	8001f78 <HAL_I2C_EnableListen_IT>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80007d6:	2100      	movs	r1, #0
 80007d8:	484b      	ldr	r0, [pc, #300]	; (8000908 <main+0x15c>)
 80007da:	f000 fef8 	bl	80015ce <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80007de:	2110      	movs	r1, #16
 80007e0:	4849      	ldr	r0, [pc, #292]	; (8000908 <main+0x15c>)
 80007e2:	f000 fef4 	bl	80015ce <HAL_DAC_Start>
	/*-------------------------------------------
	 * Start PWM for the Different Channels
	 * ------------------------------------------
	 */
	HAL_TIM_Base_Start_IT(&htim3);
 80007e6:	4849      	ldr	r0, [pc, #292]	; (800090c <main+0x160>)
 80007e8:	f003 fd2c 	bl	8004244 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007ec:	2100      	movs	r1, #0
 80007ee:	4848      	ldr	r0, [pc, #288]	; (8000910 <main+0x164>)
 80007f0:	f003 fdf2 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80007f4:	2104      	movs	r1, #4
 80007f6:	4846      	ldr	r0, [pc, #280]	; (8000910 <main+0x164>)
 80007f8:	f003 fdee 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80007fc:	2108      	movs	r1, #8
 80007fe:	4844      	ldr	r0, [pc, #272]	; (8000910 <main+0x164>)
 8000800:	f003 fdea 	bl	80043d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000804:	210c      	movs	r1, #12
 8000806:	4842      	ldr	r0, [pc, #264]	; (8000910 <main+0x164>)
 8000808:	f003 fde6 	bl	80043d8 <HAL_TIM_PWM_Start>
	/*-------------------------------------------
	 * Set The Duty Cycle of Various PWM channels
	 * -------------------------------------------
	 */
	FACE1_DTYCYC = 90;
 800080c:	4b41      	ldr	r3, [pc, #260]	; (8000914 <main+0x168>)
 800080e:	225a      	movs	r2, #90	; 0x5a
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
	FACE2_DTYCYC = 85;
 8000812:	4b40      	ldr	r3, [pc, #256]	; (8000914 <main+0x168>)
 8000814:	2255      	movs	r2, #85	; 0x55
 8000816:	639a      	str	r2, [r3, #56]	; 0x38
	FACE3_DTYCYC = 25;
 8000818:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <main+0x168>)
 800081a:	2219      	movs	r2, #25
 800081c:	63da      	str	r2, [r3, #60]	; 0x3c
	FACE4_DTYCYC = 25;
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <main+0x168>)
 8000820:	2219      	movs	r2, #25
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_UART_Transmit(&huart2, (uint8_t*) "Hello Seif El-Didi && Islam Hany \n", 34,
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	2222      	movs	r2, #34	; 0x22
 8000828:	493b      	ldr	r1, [pc, #236]	; (8000918 <main+0x16c>)
 800082a:	483c      	ldr	r0, [pc, #240]	; (800091c <main+0x170>)
 800082c:	f004 fbff 	bl	800502e <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (TIM_OVF >= TIMER_OVF_PERIOD) {
 8000830:	4b3b      	ldr	r3, [pc, #236]	; (8000920 <main+0x174>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b0b      	cmp	r3, #11
 8000836:	d95d      	bls.n	80008f4 <main+0x148>
			/*-------------------------------------------------------------
			 * Set Duty Cycle of PWM to Indicate LDR Voltage
			 * -------------------------------------------------------------
			 */
			FACE1_DTYCYC = SimulationFace1Data[MotionAng];
 8000838:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <main+0x178>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <main+0x17c>)
 8000840:	5c9a      	ldrb	r2, [r3, r2]
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <main+0x168>)
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
			FACE2_DTYCYC = SimulationFace2Data[MotionAng];
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <main+0x178>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	4b37      	ldr	r3, [pc, #220]	; (800092c <main+0x180>)
 800084e:	5c9a      	ldrb	r2, [r3, r2]
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <main+0x168>)
 8000852:	639a      	str	r2, [r3, #56]	; 0x38
			FACE3_DTYCYC = SimulationFace3Data[MotionAng];
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <main+0x178>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <main+0x184>)
 800085c:	5c9a      	ldrb	r2, [r3, r2]
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <main+0x168>)
 8000860:	63da      	str	r2, [r3, #60]	; 0x3c
			FACE4_DTYCYC = SimulationFace4Data[MotionAng];
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <main+0x178>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	4b32      	ldr	r3, [pc, #200]	; (8000934 <main+0x188>)
 800086a:	5c9a      	ldrb	r2, [r3, r2]
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <main+0x168>)
 800086e:	641a      	str	r2, [r3, #64]	; 0x40
			/*-------------------------------------------------------------
			 * Set Dac Value to Simulate Solar Cells on Face 1 and 3
			 * -------------------------------------------------------------
			 */
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
					DAC1Val[MotionAng]);
 8000870:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <main+0x178>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <main+0x18c>)
 8000878:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	4821      	ldr	r0, [pc, #132]	; (8000908 <main+0x15c>)
 8000882:	f000 fef6 	bl	8001672 <HAL_DAC_SetValue>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,
					DAC2Val[MotionAng]);
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <main+0x178>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <main+0x190>)
 800088e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,
 8000892:	2200      	movs	r2, #0
 8000894:	2110      	movs	r1, #16
 8000896:	481c      	ldr	r0, [pc, #112]	; (8000908 <main+0x15c>)
 8000898:	f000 feeb 	bl	8001672 <HAL_DAC_SetValue>
			MotionAng = (MotionAng == 7 ? 0 : MotionAng + 1);
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <main+0x178>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	2b07      	cmp	r3, #7
 80008a2:	d004      	beq.n	80008ae <main+0x102>
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <main+0x178>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	e000      	b.n	80008b0 <main+0x104>
 80008ae:	2300      	movs	r3, #0
 80008b0:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <main+0x178>)
 80008b2:	8013      	strh	r3, [r2, #0]
			TIM_OVF = 0;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <main+0x174>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]

			/*-------------------------------------------------------------
			* tilting the CubeSat to change the Gyroscope readings
			* -------------------------------------------------------------
			*/
			Gyro_Zangle += ((45*65535)/360);
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <main+0x194>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80008c2:	331f      	adds	r3, #31
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <main+0x194>)
 80008c8:	801a      	strh	r2, [r3, #0]
			i2cGero[4]	 = Gyro_Zangle>>8;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <main+0x194>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <main+0x198>)
 80008d6:	711a      	strb	r2, [r3, #4]
			i2cGero[5] 	 = Gyro_Zangle;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <main+0x194>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <main+0x198>)
 80008e0:	715a      	strb	r2, [r3, #5]

			if(Gyro_Zangle >= 65535)
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <main+0x194>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d102      	bne.n	80008f4 <main+0x148>
				Gyro_Zangle = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <main+0x194>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	801a      	strh	r2, [r3, #0]

	  }
	  /********************** X Motor Read *************************/
	  MotorX_Read();
 80008f4:	f7ff fde6 	bl	80004c4 <MotorX_Read>
	  /*********************  Y Motor Read ***********************/
	  MotorY_Read();
 80008f8:	f7ff fe60 	bl	80005bc <MotorY_Read>
	  	/******************** Z Motor Read ***********************/
	  MotorZ_Read();
 80008fc:	f7ff feda 	bl	80006b4 <MotorZ_Read>
		if (TIM_OVF >= TIMER_OVF_PERIOD) {
 8000900:	e796      	b.n	8000830 <main+0x84>
 8000902:	bf00      	nop
 8000904:	2000008c 	.word	0x2000008c
 8000908:	20000078 	.word	0x20000078
 800090c:	200000e0 	.word	0x200000e0
 8000910:	20000128 	.word	0x20000128
 8000914:	40000800 	.word	0x40000800
 8000918:	080057d0 	.word	0x080057d0
 800091c:	20000170 	.word	0x20000170
 8000920:	200001b4 	.word	0x200001b4
 8000924:	200001b8 	.word	0x200001b8
 8000928:	20000010 	.word	0x20000010
 800092c:	20000018 	.word	0x20000018
 8000930:	20000040 	.word	0x20000040
 8000934:	20000048 	.word	0x20000048
 8000938:	20000020 	.word	0x20000020
 800093c:	20000030 	.word	0x20000030
 8000940:	200001c8 	.word	0x200001c8
 8000944:	200001c0 	.word	0x200001c0

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	; 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	2230      	movs	r2, #48	; 0x30
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f004 fede 	bl	8005718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0xcc>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	4a27      	ldr	r2, [pc, #156]	; (8000a14 <SystemClock_Config+0xcc>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <SystemClock_Config+0xcc>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <SystemClock_Config+0xd0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <SystemClock_Config+0xd0>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <SystemClock_Config+0xd0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009b8:	2308      	movs	r3, #8
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009bc:	23a8      	movs	r3, #168	; 0xa8
 80009be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 ff91 	bl	80038f4 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009d8:	f000 fa56 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	230f      	movs	r3, #15
 80009de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e0:	2302      	movs	r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2105      	movs	r1, #5
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 f9f2 	bl	8003de4 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a06:	f000 fa3f 	bl	8000e88 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	; 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_DAC_Init+0x60>)
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <MX_DAC_Init+0x64>)
 8000a2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a30:	4812      	ldr	r0, [pc, #72]	; (8000a7c <MX_DAC_Init+0x60>)
 8000a32:	f000 fdaa 	bl	800158a <HAL_DAC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a3c:	f000 fa24 	bl	8000e88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_DAC_Init+0x60>)
 8000a50:	f000 fe34 	bl	80016bc <HAL_DAC_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a5a:	f000 fa15 	bl	8000e88 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2210      	movs	r2, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_DAC_Init+0x60>)
 8000a66:	f000 fe29 	bl	80016bc <HAL_DAC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 fa0a 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000078 	.word	0x20000078
 8000a80:	40007400 	.word	0x40007400

08000a84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <MX_I2C2_Init+0x54>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_I2C2_Init+0x58>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 222;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000a9c:	22de      	movs	r2, #222	; 0xde
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000ac2:	f001 f82f 	bl	8001b24 <HAL_I2C_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 f9dc 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000008c 	.word	0x2000008c
 8000ad8:	40005800 	.word	0x40005800
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000afe:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <MX_TIM3_Init+0x98>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535-1;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000b04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000b26:	f003 fb3d 	bl	80041a4 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b30:	f000 f9aa 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000b42:	f003 fdd3 	bl	80046ec <HAL_TIM_ConfigClockSource>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b4c:	f000 f99c 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_TIM3_Init+0x94>)
 8000b5e:	f004 f99d 	bl	8004e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f98e 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200000e0 	.word	0x200000e0
 8000b78:	40000400 	.word	0x40000400

08000b7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	f107 0320 	add.w	r3, r7, #32
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bac:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <MX_TIM4_Init+0x12c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bbe:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bd2:	4834      	ldr	r0, [pc, #208]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000bd4:	f003 fae6 	bl	80041a4 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000bde:	f000 f953 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bec:	4619      	mov	r1, r3
 8000bee:	482d      	ldr	r0, [pc, #180]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000bf0:	f003 fd7c 	bl	80046ec <HAL_TIM_ConfigClockSource>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000bfa:	f000 f945 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bfe:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000c00:	f003 fb90 	bl	8004324 <HAL_TIM_PWM_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000c0a:	f000 f93d 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4821      	ldr	r0, [pc, #132]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000c1e:	f004 f93d 	bl	8004e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000c28:	f000 f92e 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c2c:	2360      	movs	r3, #96	; 0x60
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4619      	mov	r1, r3
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000c44:	f003 fc90 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000c4e:	f000 f91b 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2204      	movs	r2, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000c5a:	f003 fc85 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000c64:	f000 f910 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000c70:	f003 fc7a 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000c7a:	f000 f905 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	220c      	movs	r2, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000c86:	f003 fc6f 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000c90:	f000 f8fa 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM4_Init+0x128>)
 8000c96:	f000 f9f9 	bl	800108c <HAL_TIM_MspPostInit>

}
 8000c9a:	bf00      	nop
 8000c9c:	3738      	adds	r7, #56	; 0x38
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000128 	.word	0x20000128
 8000ca8:	40000800 	.word	0x40000800

08000cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_USART2_UART_Init+0x50>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	f004 f956 	bl	8004f94 <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cee:	f000 f8cb 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000170 	.word	0x20000170
 8000cfc:	40004400 	.word	0x40004400

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000da2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000da6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_GPIO_Init+0xc8>)
 8000db8:	f000 fd00 	bl	80017bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_I2C_ErrorCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	TIM_OVF ++;
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

    HAL_I2C_EnableListen_IT(hi2c);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 f8cf 	bl	8001f78 <HAL_I2C_EnableListen_IT>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f001 f8c4 	bl	8001f78 <HAL_I2C_EnableListen_IT>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_I2C_AddrCallback>:
int flag = 0;

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
 8000e04:	4613      	mov	r3, r2
 8000e06:	803b      	strh	r3, [r7, #0]
	getTransferDirection = TransferDirection;
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <HAL_I2C_AddrCallback+0x74>)
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	7013      	strb	r3, [r2, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) // if the master wants to transmit the data
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d106      	bne.n	8000e22 <HAL_I2C_AddrCallback+0x2a>
		/*
		 * receive using sequential function.
		 *The I2C_FIRST_AND_LAST_FRAME implies that the slave
		 * will send a NACK after receiving "entered" num of bytes
		 */
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c , aRxBuffer , 1 , I2C_FIRST_AND_LAST_FRAME);
 8000e14:	2308      	movs	r3, #8
 8000e16:	2201      	movs	r2, #1
 8000e18:	4915      	ldr	r1, [pc, #84]	; (8000e70 <HAL_I2C_AddrCallback+0x78>)
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f001 f839 	bl	8001e92 <HAL_I2C_Slave_Seq_Receive_IT>
		 HAL_I2C_Init(&hi2c3);
		 */

		//HAL_I2C_EnableListen_IT(&hi2c3);
	}
}
 8000e20:	e020      	b.n	8000e64 <HAL_I2C_AddrCallback+0x6c>
		flag = 1;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_I2C_AddrCallback+0x7c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
		if (aRxBuffer[0] == IMU_REG_ACCEL_DATA) {
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_I2C_AddrCallback+0x78>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b3b      	cmp	r3, #59	; 0x3b
 8000e2e:	d105      	bne.n	8000e3c <HAL_I2C_AddrCallback+0x44>
			HAL_I2C_Slave_Sequential_Transmit_IT(&hi2c2, i2cAcc, 6,
 8000e30:	2302      	movs	r3, #2
 8000e32:	2206      	movs	r2, #6
 8000e34:	4910      	ldr	r1, [pc, #64]	; (8000e78 <HAL_I2C_AddrCallback+0x80>)
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <HAL_I2C_AddrCallback+0x84>)
 8000e38:	f000 ffb8 	bl	8001dac <HAL_I2C_Slave_Seq_Transmit_IT>
		if (aRxBuffer[0] == IMU_REG_GYRO_DATA) {
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_I2C_AddrCallback+0x78>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b43      	cmp	r3, #67	; 0x43
 8000e42:	d105      	bne.n	8000e50 <HAL_I2C_AddrCallback+0x58>
			HAL_I2C_Slave_Sequential_Transmit_IT(&hi2c2, i2cGero, 6,
 8000e44:	2302      	movs	r3, #2
 8000e46:	2206      	movs	r2, #6
 8000e48:	490d      	ldr	r1, [pc, #52]	; (8000e80 <HAL_I2C_AddrCallback+0x88>)
 8000e4a:	480c      	ldr	r0, [pc, #48]	; (8000e7c <HAL_I2C_AddrCallback+0x84>)
 8000e4c:	f000 ffae 	bl	8001dac <HAL_I2C_Slave_Seq_Transmit_IT>
		if (aRxBuffer[0] == IMU_REG_TEMP_DATA) {
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_I2C_AddrCallback+0x78>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b41      	cmp	r3, #65	; 0x41
 8000e56:	d105      	bne.n	8000e64 <HAL_I2C_AddrCallback+0x6c>
			HAL_I2C_Slave_Sequential_Transmit_IT(&hi2c2, i2ctemp, 2,
 8000e58:	2302      	movs	r3, #2
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4909      	ldr	r1, [pc, #36]	; (8000e84 <HAL_I2C_AddrCallback+0x8c>)
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <HAL_I2C_AddrCallback+0x84>)
 8000e60:	f000 ffa4 	bl	8001dac <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200001ba 	.word	0x200001ba
 8000e70:	200001bc 	.word	0x200001bc
 8000e74:	200001cc 	.word	0x200001cc
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	2000008c 	.word	0x2000008c
 8000e80:	200001c0 	.word	0x200001c0
 8000e84:	20000000 	.word	0x20000000

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x8>
	...

08000e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_DAC_MspInit+0x7c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d127      	bne.n	8000f56 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_DAC_MspInit+0x80>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <HAL_DAC_MspInit+0x80>)
 8000f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_DAC_MspInit+0x80>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_DAC_MspInit+0x80>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_DAC_MspInit+0x80>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_DAC_MspInit+0x80>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f3e:	2330      	movs	r3, #48	; 0x30
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <HAL_DAC_MspInit+0x84>)
 8000f52:	f000 fc33 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40007400 	.word	0x40007400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <HAL_I2C_MspInit+0xa4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d13c      	bne.n	8001008 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_I2C_MspInit+0xa8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <HAL_I2C_MspInit+0xa8>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_I2C_MspInit+0xa8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000faa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <HAL_I2C_MspInit+0xac>)
 8000fc8:	f000 fbf8 	bl	80017bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_I2C_MspInit+0xa8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_I2C_MspInit+0xa8>)
 8000fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_I2C_MspInit+0xa8>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2021      	movs	r0, #33	; 0x21
 8000fee:	f000 fa96 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ff2:	2021      	movs	r0, #33	; 0x21
 8000ff4:	f000 faaf 	bl	8001556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2022      	movs	r0, #34	; 0x22
 8000ffe:	f000 fa8e 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001002:	2022      	movs	r0, #34	; 0x22
 8001004:	f000 faa7 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40005800 	.word	0x40005800
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400

0800101c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a15      	ldr	r2, [pc, #84]	; (8001080 <HAL_TIM_Base_MspInit+0x64>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10e      	bne.n	800104c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_TIM_Base_MspInit+0x68>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <HAL_TIM_Base_MspInit+0x68>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_TIM_Base_MspInit+0x68>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800104a:	e012      	b.n	8001072 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0x6c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10d      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_TIM_Base_MspInit+0x68>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_TIM_Base_MspInit+0x68>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <HAL_TIM_Base_MspInit+0x68>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40000400 	.word	0x40000400
 8001084:	40023800 	.word	0x40023800
 8001088:	40000800 	.word	0x40000800

0800108c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <HAL_TIM_MspPostInit+0x68>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d11e      	bne.n	80010ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_TIM_MspPostInit+0x6c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_TIM_MspPostInit+0x6c>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_TIM_MspPostInit+0x6c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010dc:	2302      	movs	r3, #2
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_TIM_MspPostInit+0x70>)
 80010e8:	f000 fb68 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40000800 	.word	0x40000800
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020c00 	.word	0x40020c00

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a19      	ldr	r2, [pc, #100]	; (8001184 <HAL_UART_MspInit+0x84>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12b      	bne.n	800117a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_UART_MspInit+0x88>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_UART_MspInit+0x88>)
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_UART_MspInit+0x88>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_UART_MspInit+0x88>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_UART_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800115a:	230c      	movs	r3, #12
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116a:	2307      	movs	r3, #7
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <HAL_UART_MspInit+0x8c>)
 8001176:	f000 fb21 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40004400 	.word	0x40004400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 f8a4 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <I2C2_EV_IRQHandler+0x10>)
 80011ea:	f000 fefb 	bl	8001fe4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000008c 	.word	0x2000008c

080011f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <I2C2_ER_IRQHandler+0x10>)
 80011fe:	f001 f844 	bl	800228a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000008c 	.word	0x2000008c

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800124c:	4c0b      	ldr	r4, [pc, #44]	; (800127c <LoopFillZerobss+0x26>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800125a:	f7ff ffd7 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f004 fa63 	bl	8005728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff faa3 	bl	80007ac <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001274:	0800581c 	.word	0x0800581c
  ldr r2, =_sbss
 8001278:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800127c:	200001d4 	.word	0x200001d4

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f92b 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	200f      	movs	r0, #15
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fdec 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f943 	bl	8001572 <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f90b 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000050 	.word	0x20000050
 8001320:	20000058 	.word	0x20000058
 8001324:	20000054 	.word	0x20000054

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000058 	.word	0x20000058
 800134c:	200001d0 	.word	0x200001d0

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200001d0 	.word	0x200001d0

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	; (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e014      	b.n	80015c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	791b      	ldrb	r3, [r3, #4]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fc99 	bl	8000ee4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	795b      	ldrb	r3, [r3, #5]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_DAC_Start+0x16>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e040      	b.n	8001666 <HAL_DAC_Start+0x98>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2202      	movs	r2, #2
 80015ee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2201      	movs	r2, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001618:	2b3c      	cmp	r3, #60	; 0x3c
 800161a:	d11d      	bne.n	8001658 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	e014      	b.n	8001658 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	213c      	movs	r1, #60	; 0x3c
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	429a      	cmp	r2, r3
 8001646:	d107      	bne.n	8001658 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0202 	orr.w	r2, r2, #2
 8001656:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001672:	b480      	push	{r7}
 8001674:	b087      	sub	sp, #28
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	3308      	adds	r3, #8
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e004      	b.n	80016a6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	3314      	adds	r3, #20
 80016a4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	461a      	mov	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	795b      	ldrb	r3, [r3, #5]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_DAC_ConfigChannel+0x18>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e03c      	b.n	800174e <HAL_DAC_ConfigChannel+0x92>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2202      	movs	r2, #2
 80016de:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	f640 72fe 	movw	r2, #4094	; 0xffe
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	4013      	ands	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	22c0      	movs	r2, #192	; 0xc0
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d004      	beq.n	8001778 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e00c      	b.n	8001792 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2205      	movs	r2, #5
 800177c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ac:	b2db      	uxtb	r3, r3
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e16b      	b.n	8001ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 815a 	bne.w	8001aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d005      	beq.n	800180e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180a:	2b02      	cmp	r3, #2
 800180c:	d130      	bne.n	8001870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b03      	cmp	r3, #3
 800187a:	d017      	beq.n	80018ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d123      	bne.n	8001900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	08da      	lsrs	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	08da      	lsrs	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3208      	adds	r2, #8
 80018fa:	69b9      	ldr	r1, [r7, #24]
 80018fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80b4 	beq.w	8001aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <HAL_GPIO_Init+0x30c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a5f      	ldr	r2, [pc, #380]	; (8001ac8 <HAL_GPIO_Init+0x30c>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_GPIO_Init+0x30c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800195e:	4a5b      	ldr	r2, [pc, #364]	; (8001acc <HAL_GPIO_Init+0x310>)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_GPIO_Init+0x314>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d02b      	beq.n	80019e2 <HAL_GPIO_Init+0x226>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_GPIO_Init+0x318>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d025      	beq.n	80019de <HAL_GPIO_Init+0x222>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <HAL_GPIO_Init+0x31c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01f      	beq.n	80019da <HAL_GPIO_Init+0x21e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4f      	ldr	r2, [pc, #316]	; (8001adc <HAL_GPIO_Init+0x320>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x21a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4e      	ldr	r2, [pc, #312]	; (8001ae0 <HAL_GPIO_Init+0x324>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x216>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4d      	ldr	r2, [pc, #308]	; (8001ae4 <HAL_GPIO_Init+0x328>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x212>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4c      	ldr	r2, [pc, #304]	; (8001ae8 <HAL_GPIO_Init+0x32c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4b      	ldr	r2, [pc, #300]	; (8001aec <HAL_GPIO_Init+0x330>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x20a>
 80019c2:	2307      	movs	r3, #7
 80019c4:	e00e      	b.n	80019e4 <HAL_GPIO_Init+0x228>
 80019c6:	2308      	movs	r3, #8
 80019c8:	e00c      	b.n	80019e4 <HAL_GPIO_Init+0x228>
 80019ca:	2306      	movs	r3, #6
 80019cc:	e00a      	b.n	80019e4 <HAL_GPIO_Init+0x228>
 80019ce:	2305      	movs	r3, #5
 80019d0:	e008      	b.n	80019e4 <HAL_GPIO_Init+0x228>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x228>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e004      	b.n	80019e4 <HAL_GPIO_Init+0x228>
 80019da:	2302      	movs	r3, #2
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_Init+0x228>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x228>
 80019e2:	2300      	movs	r3, #0
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f002 0203 	and.w	r2, r2, #3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4093      	lsls	r3, r2
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f4:	4935      	ldr	r1, [pc, #212]	; (8001acc <HAL_GPIO_Init+0x310>)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a26:	4a32      	ldr	r2, [pc, #200]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a50:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <HAL_GPIO_Init+0x334>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	f67f ae90 	bls.w	80017d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40021400 	.word	0x40021400
 8001ae8:	40021800 	.word	0x40021800
 8001aec:	40021c00 	.word	0x40021c00
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e12b      	b.n	8001d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fa0e 	bl	8000f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2224      	movs	r2, #36	; 0x24
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b88:	f002 fae4 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 8001b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a81      	ldr	r2, [pc, #516]	; (8001d98 <HAL_I2C_Init+0x274>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d807      	bhi.n	8001ba8 <HAL_I2C_Init+0x84>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a80      	ldr	r2, [pc, #512]	; (8001d9c <HAL_I2C_Init+0x278>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	bf94      	ite	ls
 8001ba0:	2301      	movls	r3, #1
 8001ba2:	2300      	movhi	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	e006      	b.n	8001bb6 <HAL_I2C_Init+0x92>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a7d      	ldr	r2, [pc, #500]	; (8001da0 <HAL_I2C_Init+0x27c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	bf94      	ite	ls
 8001bb0:	2301      	movls	r3, #1
 8001bb2:	2300      	movhi	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0e7      	b.n	8001d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4a78      	ldr	r2, [pc, #480]	; (8001da4 <HAL_I2C_Init+0x280>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0c9b      	lsrs	r3, r3, #18
 8001bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a6a      	ldr	r2, [pc, #424]	; (8001d98 <HAL_I2C_Init+0x274>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d802      	bhi.n	8001bf8 <HAL_I2C_Init+0xd4>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	e009      	b.n	8001c0c <HAL_I2C_Init+0xe8>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	4a69      	ldr	r2, [pc, #420]	; (8001da8 <HAL_I2C_Init+0x284>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	495c      	ldr	r1, [pc, #368]	; (8001d98 <HAL_I2C_Init+0x274>)
 8001c28:	428b      	cmp	r3, r1
 8001c2a:	d819      	bhi.n	8001c60 <HAL_I2C_Init+0x13c>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1e59      	subs	r1, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c3a:	1c59      	adds	r1, r3, #1
 8001c3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c40:	400b      	ands	r3, r1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <HAL_I2C_Init+0x138>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1e59      	subs	r1, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5a:	e051      	b.n	8001d00 <HAL_I2C_Init+0x1dc>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e04f      	b.n	8001d00 <HAL_I2C_Init+0x1dc>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d111      	bne.n	8001c8c <HAL_I2C_Init+0x168>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1e58      	subs	r0, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	440b      	add	r3, r1
 8001c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf0c      	ite	eq
 8001c84:	2301      	moveq	r3, #1
 8001c86:	2300      	movne	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	e012      	b.n	8001cb2 <HAL_I2C_Init+0x18e>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e58      	subs	r0, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	0099      	lsls	r1, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_I2C_Init+0x196>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e022      	b.n	8001d00 <HAL_I2C_Init+0x1dc>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_I2C_Init+0x1bc>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1e58      	subs	r0, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6859      	ldr	r1, [r3, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	440b      	add	r3, r1
 8001cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cde:	e00f      	b.n	8001d00 <HAL_I2C_Init+0x1dc>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1e58      	subs	r0, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	0099      	lsls	r1, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	6809      	ldr	r1, [r1, #0]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6911      	ldr	r1, [r2, #16]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68d2      	ldr	r2, [r2, #12]
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	000186a0 	.word	0x000186a0
 8001d9c:	001e847f 	.word	0x001e847f
 8001da0:	003d08ff 	.word	0x003d08ff
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	10624dd3 	.word	0x10624dd3

08001dac <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001dc8:	2b28      	cmp	r3, #40	; 0x28
 8001dca:	d15b      	bne.n	8001e84 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e054      	b.n	8001e86 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e04d      	b.n	8001e86 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d007      	beq.n	8001e10 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2229      	movs	r2, #41	; 0x29
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	88fa      	ldrh	r2, [r7, #6]
 8001e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001e7e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b087      	sub	sp, #28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001eae:	2b28      	cmp	r3, #40	; 0x28
 8001eb0:	d15b      	bne.n	8001f6a <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e054      	b.n	8001f6c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e04d      	b.n	8001f6c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d007      	beq.n	8001ef6 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f04:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	222a      	movs	r2, #42	; 0x2a
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	88fa      	ldrh	r2, [r7, #6]
 8001f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001f64:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
  }
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d124      	bne.n	8001fd6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2228      	movs	r2, #40	; 0x28
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d007      	beq.n	8001fb2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001fd0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002004:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b10      	cmp	r3, #16
 8002012:	d003      	beq.n	800201c <HAL_I2C_EV_IRQHandler+0x38>
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	f040 80b1 	bne.w	800217e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_I2C_EV_IRQHandler+0x6e>
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800203c:	d003      	beq.n	8002046 <HAL_I2C_EV_IRQHandler+0x62>
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002044:	d101      	bne.n	800204a <HAL_I2C_EV_IRQHandler+0x66>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_I2C_EV_IRQHandler+0x68>
 800204a:	2300      	movs	r3, #0
 800204c:	2b01      	cmp	r3, #1
 800204e:	f000 8114 	beq.w	800227a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_I2C_EV_IRQHandler+0x90>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f001 fc28 	bl	80038bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fd32 	bl	8002ad6 <I2C_Master_SB>
 8002072:	e083      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_I2C_EV_IRQHandler+0xac>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fdaa 	bl	8002be2 <I2C_Master_ADD10>
 800208e:	e075      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_I2C_EV_IRQHandler+0xc8>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fdc6 	bl	8002c36 <I2C_Master_ADDR>
 80020aa:	e067      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d036      	beq.n	8002124 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c4:	f000 80db 	beq.w	800227e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00d      	beq.n	80020ee <HAL_I2C_EV_IRQHandler+0x10a>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_I2C_EV_IRQHandler+0x10a>
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f9b4 	bl	8002454 <I2C_MasterTransmit_TXE>
 80020ec:	e046      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80c2 	beq.w	800227e <HAL_I2C_EV_IRQHandler+0x29a>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80bc 	beq.w	800227e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002106:	7bbb      	ldrb	r3, [r7, #14]
 8002108:	2b21      	cmp	r3, #33	; 0x21
 800210a:	d103      	bne.n	8002114 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fa3d 	bl	800258c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002112:	e0b4      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	f040 80b1 	bne.w	800227e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 faab 	bl	8002678 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002122:	e0ac      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800212e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002132:	f000 80a4 	beq.w	800227e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00d      	beq.n	800215c <HAL_I2C_EV_IRQHandler+0x178>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_I2C_EV_IRQHandler+0x178>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fb23 	bl	80027a0 <I2C_MasterReceive_RXNE>
 800215a:	e00f      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 808b 	beq.w	800227e <HAL_I2C_EV_IRQHandler+0x29a>
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8085 	beq.w	800227e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fbc4 	bl	8002902 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800217a:	e080      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x29a>
 800217c:	e07f      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e007      	b.n	80021a0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d011      	beq.n	80021ce <HAL_I2C_EV_IRQHandler+0x1ea>
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80021c4:	69b9      	ldr	r1, [r7, #24]
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 ff84 	bl	80030d4 <I2C_Slave_ADDR>
 80021cc:	e05a      	b.n	8002284 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_I2C_EV_IRQHandler+0x206>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 ffbe 	bl	8003164 <I2C_Slave_STOPF>
 80021e8:	e04c      	b.n	8002284 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	2b21      	cmp	r3, #33	; 0x21
 80021ee:	d002      	beq.n	80021f6 <HAL_I2C_EV_IRQHandler+0x212>
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	2b29      	cmp	r3, #41	; 0x29
 80021f4:	d120      	bne.n	8002238 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <HAL_I2C_EV_IRQHandler+0x238>
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_I2C_EV_IRQHandler+0x238>
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fe9f 	bl	8002f58 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800221a:	e032      	b.n	8002282 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d02d      	beq.n	8002282 <HAL_I2C_EV_IRQHandler+0x29e>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	2b00      	cmp	r3, #0
 800222e:	d028      	beq.n	8002282 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fece 	bl	8002fd2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002236:	e024      	b.n	8002282 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <HAL_I2C_EV_IRQHandler+0x27a>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_I2C_EV_IRQHandler+0x27a>
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fedc 	bl	8003014 <I2C_SlaveReceive_RXNE>
 800225c:	e012      	b.n	8002284 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 ff0c 	bl	8003090 <I2C_SlaveReceive_BTF>
 8002278:	e004      	b.n	8002284 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800227a:	bf00      	nop
 800227c:	e002      	b.n	8002284 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800227e:	bf00      	nop
 8002280:	e000      	b.n	8002284 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002282:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002284:	3720      	adds	r7, #32
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b08a      	sub	sp, #40	; 0x28
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_I2C_ER_IRQHandler+0x4a>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <HAL_I2C_ER_IRQHandler+0x70>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	f043 0302 	orr.w	r3, r3, #2
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80022f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d03e      	beq.n	8002382 <HAL_I2C_ER_IRQHandler+0xf8>
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d039      	beq.n	8002382 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800230e:	7efb      	ldrb	r3, [r7, #27]
 8002310:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002328:	7ebb      	ldrb	r3, [r7, #26]
 800232a:	2b20      	cmp	r3, #32
 800232c:	d112      	bne.n	8002354 <HAL_I2C_ER_IRQHandler+0xca>
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10f      	bne.n	8002354 <HAL_I2C_ER_IRQHandler+0xca>
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b21      	cmp	r3, #33	; 0x21
 8002338:	d008      	beq.n	800234c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b29      	cmp	r3, #41	; 0x29
 800233e:	d005      	beq.n	800234c <HAL_I2C_ER_IRQHandler+0xc2>
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	2b28      	cmp	r3, #40	; 0x28
 8002344:	d106      	bne.n	8002354 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b21      	cmp	r3, #33	; 0x21
 800234a:	d103      	bne.n	8002354 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f001 f839 	bl	80033c4 <I2C_Slave_AF>
 8002352:	e016      	b.n	8002382 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800235c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002366:	7efb      	ldrb	r3, [r7, #27]
 8002368:	2b10      	cmp	r3, #16
 800236a:	d002      	beq.n	8002372 <HAL_I2C_ER_IRQHandler+0xe8>
 800236c:	7efb      	ldrb	r3, [r7, #27]
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d107      	bne.n	8002382 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002380:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00d      	beq.n	80023a8 <HAL_I2C_ER_IRQHandler+0x11e>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80023a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f001 f872 	bl	80034a4 <I2C_ITError>
  }
}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002462:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	2b00      	cmp	r3, #0
 8002478:	d150      	bne.n	800251c <I2C_MasterTransmit_TXE+0xc8>
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b21      	cmp	r3, #33	; 0x21
 800247e:	d14d      	bne.n	800251c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b08      	cmp	r3, #8
 8002484:	d01d      	beq.n	80024c2 <I2C_MasterTransmit_TXE+0x6e>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b20      	cmp	r3, #32
 800248a:	d01a      	beq.n	80024c2 <I2C_MasterTransmit_TXE+0x6e>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002492:	d016      	beq.n	80024c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2211      	movs	r2, #17
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ff84 	bl	80023c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024c0:	e060      	b.n	8002584 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d107      	bne.n	800250c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff87 	bl	8002418 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800250a:	e03b      	b.n	8002584 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff57 	bl	80023c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800251a:	e033      	b.n	8002584 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b21      	cmp	r3, #33	; 0x21
 8002520:	d005      	beq.n	800252e <I2C_MasterTransmit_TXE+0xda>
 8002522:	7bbb      	ldrb	r3, [r7, #14]
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d12d      	bne.n	8002584 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b22      	cmp	r3, #34	; 0x22
 800252c:	d12a      	bne.n	8002584 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d108      	bne.n	800254a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002546:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002548:	e01c      	b.n	8002584 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d103      	bne.n	800255e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f88e 	bl	8002678 <I2C_MemoryTransmit_TXE_BTF>
}
 800255c:	e012      	b.n	8002584 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002582:	e7ff      	b.n	8002584 <I2C_MasterTransmit_TXE+0x130>
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b21      	cmp	r3, #33	; 0x21
 80025a4:	d164      	bne.n	8002670 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d012      	beq.n	80025d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025d4:	e04c      	b.n	8002670 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d01d      	beq.n	8002618 <I2C_MasterTransmit_BTF+0x8c>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d01a      	beq.n	8002618 <I2C_MasterTransmit_BTF+0x8c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025e8:	d016      	beq.n	8002618 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2211      	movs	r2, #17
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fed9 	bl	80023c8 <HAL_I2C_MasterTxCpltCallback>
}
 8002616:	e02b      	b.n	8002670 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002626:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d107      	bne.n	8002662 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fedc 	bl	8002418 <HAL_I2C_MemTxCpltCallback>
}
 8002660:	e006      	b.n	8002670 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff feac 	bl	80023c8 <HAL_I2C_MasterTxCpltCallback>
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002686:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268c:	2b00      	cmp	r3, #0
 800268e:	d11d      	bne.n	80026cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10b      	bne.n	80026b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	b2da      	uxtb	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	1c9a      	adds	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80026ae:	e073      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	121b      	asrs	r3, r3, #8
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026ca:	e065      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10b      	bne.n	80026ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026ea:	e055      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d151      	bne.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b22      	cmp	r3, #34	; 0x22
 80026f8:	d10d      	bne.n	8002716 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002714:	e040      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d015      	beq.n	800274c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b21      	cmp	r3, #33	; 0x21
 8002724:	d112      	bne.n	800274c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800274a:	e025      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d120      	bne.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b21      	cmp	r3, #33	; 0x21
 800275a:	d11d      	bne.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800276a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fe40 	bl	8002418 <HAL_I2C_MemTxCpltCallback>
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b22      	cmp	r3, #34	; 0x22
 80027b2:	f040 80a2 	bne.w	80028fa <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d921      	bls.n	8002808 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	f040 8082 	bne.w	80028fa <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002804:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002806:	e078      	b.n	80028fa <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	2b02      	cmp	r3, #2
 800280e:	d074      	beq.n	80028fa <I2C_MasterReceive_RXNE+0x15a>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d002      	beq.n	800281c <I2C_MasterReceive_RXNE+0x7c>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d16e      	bne.n	80028fa <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 f81b 	bl	8003858 <I2C_WaitOnSTOPRequestThroughIT>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d142      	bne.n	80028ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002836:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002846:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d10a      	bne.n	8002898 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fdcb 	bl	800242c <HAL_I2C_MemRxCpltCallback>
}
 8002896:	e030      	b.n	80028fa <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2212      	movs	r2, #18
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fd98 	bl	80023dc <HAL_I2C_MasterRxCpltCallback>
}
 80028ac:	e025      	b.n	80028fa <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7fe fa69 	bl	8000dcc <HAL_I2C_ErrorCallback>
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b04      	cmp	r3, #4
 8002918:	d11b      	bne.n	8002952 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002950:	e0bd      	b.n	8002ace <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b03      	cmp	r3, #3
 800295a:	d129      	bne.n	80029b0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00a      	beq.n	8002988 <I2C_MasterReceive_BTF+0x86>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d007      	beq.n	8002988 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029ae:	e08e      	b.n	8002ace <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d176      	bne.n	8002aa8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d002      	beq.n	80029c6 <I2C_MasterReceive_BTF+0xc4>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d108      	bne.n	80029d8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e019      	b.n	8002a0c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d002      	beq.n	80029e4 <I2C_MasterReceive_BTF+0xe2>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d108      	bne.n	80029f6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e00a      	b.n	8002a0c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d007      	beq.n	8002a0c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a66:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d10a      	bne.n	8002a92 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fcce 	bl	800242c <HAL_I2C_MemRxCpltCallback>
}
 8002a90:	e01d      	b.n	8002ace <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2212      	movs	r2, #18
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fc9b 	bl	80023dc <HAL_I2C_MasterRxCpltCallback>
}
 8002aa6:	e012      	b.n	8002ace <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d117      	bne.n	8002b1a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b02:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b04:	e067      	b.n	8002bd6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]
}
 8002b18:	e05d      	b.n	8002bd6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b22:	d133      	bne.n	8002b8c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b21      	cmp	r3, #33	; 0x21
 8002b2e:	d109      	bne.n	8002b44 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b40:	611a      	str	r2, [r3, #16]
 8002b42:	e008      	b.n	8002b56 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <I2C_Master_SB+0x92>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d108      	bne.n	8002b7a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d032      	beq.n	8002bd6 <I2C_Master_SB+0x100>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02d      	beq.n	8002bd6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b88:	605a      	str	r2, [r3, #4]
}
 8002b8a:	e024      	b.n	8002bd6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10e      	bne.n	8002bb2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	11db      	asrs	r3, r3, #7
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 0306 	and.w	r3, r3, #6
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f063 030f 	orn	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
}
 8002bb0:	e011      	b.n	8002bd6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10d      	bne.n	8002bd6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	11db      	asrs	r3, r3, #7
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 0306 	and.w	r3, r3, #6
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f063 030e 	orn	r3, r3, #14
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	611a      	str	r2, [r3, #16]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <I2C_Master_ADD10+0x26>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d108      	bne.n	8002c1a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <I2C_Master_ADD10+0x48>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c28:	605a      	str	r2, [r3, #4]
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b091      	sub	sp, #68	; 0x44
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b22      	cmp	r3, #34	; 0x22
 8002c5e:	f040 8169 	bne.w	8002f34 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <I2C_Master_ADDR+0x54>
 8002c6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d10b      	bne.n	8002c8a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	e160      	b.n	8002f4c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11d      	bne.n	8002cce <I2C_Master_ADDR+0x98>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c9a:	d118      	bne.n	8002cce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	651a      	str	r2, [r3, #80]	; 0x50
 8002ccc:	e13e      	b.n	8002f4c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d113      	bne.n	8002d00 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e115      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	f040 808a 	bne.w	8002e20 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d12:	d137      	bne.n	8002d84 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d32:	d113      	bne.n	8002d5c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	e0e7      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	623b      	str	r3, [r7, #32]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	623b      	str	r3, [r7, #32]
 8002d70:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e0d3      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d02e      	beq.n	8002de8 <I2C_Master_ADDR+0x1b2>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d02b      	beq.n	8002de8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	2b12      	cmp	r3, #18
 8002d94:	d102      	bne.n	8002d9c <I2C_Master_ADDR+0x166>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d125      	bne.n	8002de8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00e      	beq.n	8002dc0 <I2C_Master_ADDR+0x18a>
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d00b      	beq.n	8002dc0 <I2C_Master_ADDR+0x18a>
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d008      	beq.n	8002dc0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e007      	b.n	8002dd0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	e0a1      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e085      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d14d      	bne.n	8002ec6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d016      	beq.n	8002e5e <I2C_Master_ADDR+0x228>
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d013      	beq.n	8002e5e <I2C_Master_ADDR+0x228>
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d010      	beq.n	8002e5e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e007      	b.n	8002e6e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7c:	d117      	bne.n	8002eae <I2C_Master_ADDR+0x278>
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e84:	d00b      	beq.n	8002e9e <I2C_Master_ADDR+0x268>
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d008      	beq.n	8002e9e <I2C_Master_ADDR+0x268>
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d005      	beq.n	8002e9e <I2C_Master_ADDR+0x268>
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d002      	beq.n	8002e9e <I2C_Master_ADDR+0x268>
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d107      	bne.n	8002eae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002eac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	e032      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee4:	d117      	bne.n	8002f16 <I2C_Master_ADDR+0x2e0>
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eec:	d00b      	beq.n	8002f06 <I2C_Master_ADDR+0x2d0>
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d008      	beq.n	8002f06 <I2C_Master_ADDR+0x2d0>
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d005      	beq.n	8002f06 <I2C_Master_ADDR+0x2d0>
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d002      	beq.n	8002f06 <I2C_Master_ADDR+0x2d0>
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d107      	bne.n	8002f16 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f32:	e00b      	b.n	8002f4c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	e7ff      	b.n	8002f4c <I2C_Master_ADDR+0x316>
 8002f4c:	bf00      	nop
 8002f4e:	3744      	adds	r7, #68	; 0x44
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d02b      	beq.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d114      	bne.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b29      	cmp	r3, #41	; 0x29
 8002fa4:	d111      	bne.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2221      	movs	r2, #33	; 0x21
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2228      	movs	r2, #40	; 0x28
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fa13 	bl	80023f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d011      	beq.n	8003008 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003022:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02c      	beq.n	8003088 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <I2C_SlaveReceive_RXNE+0x74>
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b2a      	cmp	r3, #42	; 0x2a
 8003062:	d111      	bne.n	8003088 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003072:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2222      	movs	r2, #34	; 0x22
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2228      	movs	r2, #40	; 0x28
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff f9be 	bl	8002404 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030ee:	2b28      	cmp	r3, #40	; 0x28
 80030f0:	d125      	bne.n	800313e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	81bb      	strh	r3, [r7, #12]
 8003120:	e002      	b.n	8003128 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003130:	89ba      	ldrh	r2, [r7, #12]
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fe5e 	bl	8000df8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800313c:	e00e      	b.n	800315c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003182:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c0:	d172      	bne.n	80032a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b22      	cmp	r3, #34	; 0x22
 80031c6:	d002      	beq.n	80031ce <I2C_Slave_STOPF+0x6a>
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b2a      	cmp	r3, #42	; 0x2a
 80031cc:	d135      	bne.n	800323a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f043 0204 	orr.w	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003200:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fac9 	bl	800179e <HAL_DMA_GetState>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d049      	beq.n	80032a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4a69      	ldr	r2, [pc, #420]	; (80033bc <I2C_Slave_STOPF+0x258>)
 8003218:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fa9b 	bl	800175a <HAL_DMA_Abort_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d03d      	beq.n	80032a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003234:	4610      	mov	r0, r2
 8003236:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003238:	e035      	b.n	80032a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0204 	orr.w	r2, r3, #4
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fa93 	bl	800179e <HAL_DMA_GetState>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d014      	beq.n	80032a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	4a4e      	ldr	r2, [pc, #312]	; (80033bc <I2C_Slave_STOPF+0x258>)
 8003284:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fa65 	bl	800175a <HAL_DMA_Abort_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
 80032a4:	e000      	b.n	80032a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d03e      	beq.n	8003330 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d112      	bne.n	80032e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d112      	bne.n	800331a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8b3 	bl	80034a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800333e:	e039      	b.n	80033b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b2a      	cmp	r3, #42	; 0x2a
 8003344:	d109      	bne.n	800335a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2228      	movs	r2, #40	; 0x28
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff f855 	bl	8002404 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b28      	cmp	r3, #40	; 0x28
 8003364:	d111      	bne.n	800338a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <I2C_Slave_STOPF+0x25c>)
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd fd2d 	bl	8000de2 <HAL_I2C_ListenCpltCallback>
}
 8003388:	e014      	b.n	80033b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	2b22      	cmp	r3, #34	; 0x22
 8003390:	d002      	beq.n	8003398 <I2C_Slave_STOPF+0x234>
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b22      	cmp	r3, #34	; 0x22
 8003396:	d10d      	bne.n	80033b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff f828 	bl	8002404 <HAL_I2C_SlaveRxCpltCallback>
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	08003709 	.word	0x08003709
 80033c0:	ffff0000 	.word	0xffff0000

080033c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d002      	beq.n	80033e6 <I2C_Slave_AF+0x22>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d129      	bne.n	800343a <I2C_Slave_AF+0x76>
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b28      	cmp	r3, #40	; 0x28
 80033ea:	d126      	bne.n	800343a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <I2C_Slave_AF+0xdc>)
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003400:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800340a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fcd5 	bl	8000de2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003438:	e02e      	b.n	8003498 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b21      	cmp	r3, #33	; 0x21
 800343e:	d126      	bne.n	800348e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <I2C_Slave_AF+0xdc>)
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2221      	movs	r2, #33	; 0x21
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800346a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003474:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe ffb2 	bl	80023f0 <HAL_I2C_SlaveTxCpltCallback>
}
 800348c:	e004      	b.n	8003498 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003496:	615a      	str	r2, [r3, #20]
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	ffff0000 	.word	0xffff0000

080034a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d002      	beq.n	80034c8 <I2C_ITError+0x24>
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d10a      	bne.n	80034de <I2C_ITError+0x3a>
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b22      	cmp	r3, #34	; 0x22
 80034cc:	d107      	bne.n	80034de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e4:	2b28      	cmp	r3, #40	; 0x28
 80034e6:	d107      	bne.n	80034f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2228      	movs	r2, #40	; 0x28
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034f6:	e015      	b.n	8003524 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003506:	d00a      	beq.n	800351e <I2C_ITError+0x7a>
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b60      	cmp	r3, #96	; 0x60
 800350c:	d007      	beq.n	800351e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003532:	d162      	bne.n	80035fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003542:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d020      	beq.n	8003594 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <I2C_ITError+0x25c>)
 8003558:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe f8fb 	bl	800175a <HAL_DMA_Abort_IT>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8089 	beq.w	800367e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800358e:	4610      	mov	r0, r2
 8003590:	4798      	blx	r3
 8003592:	e074      	b.n	800367e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	4a59      	ldr	r2, [pc, #356]	; (8003700 <I2C_ITError+0x25c>)
 800359a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe f8da 	bl	800175a <HAL_DMA_Abort_IT>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d068      	beq.n	800367e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d10b      	bne.n	80035d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
 80035f8:	e041      	b.n	800367e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b60      	cmp	r3, #96	; 0x60
 8003604:	d125      	bne.n	8003652 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d10b      	bne.n	800363a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe fef8 	bl	8002440 <HAL_I2C_AbortCpltCallback>
 8003650:	e015      	b.n	800367e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d10b      	bne.n	8003678 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fd fba7 	bl	8000dcc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d113      	bne.n	80036f8 <I2C_ITError+0x254>
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b28      	cmp	r3, #40	; 0x28
 80036d4:	d110      	bne.n	80036f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <I2C_ITError+0x260>)
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fb75 	bl	8000de2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	08003709 	.word	0x08003709
 8003704:	ffff0000 	.word	0xffff0000

08003708 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003722:	4b4b      	ldr	r3, [pc, #300]	; (8003850 <I2C_DMAAbort+0x148>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	08db      	lsrs	r3, r3, #3
 8003728:	4a4a      	ldr	r2, [pc, #296]	; (8003854 <I2C_DMAAbort+0x14c>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0a1a      	lsrs	r2, r3, #8
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	00da      	lsls	r2, r3, #3
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800374e:	e00a      	b.n	8003766 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3b01      	subs	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003764:	d0ea      	beq.n	800373c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	2200      	movs	r2, #0
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	2200      	movs	r2, #0
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	2200      	movs	r2, #0
 80037aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	2200      	movs	r2, #0
 80037ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b60      	cmp	r3, #96	; 0x60
 80037d6:	d10e      	bne.n	80037f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ee:	6978      	ldr	r0, [r7, #20]
 80037f0:	f7fe fe26 	bl	8002440 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037f4:	e027      	b.n	8003846 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037fc:	2b28      	cmp	r3, #40	; 0x28
 80037fe:	d117      	bne.n	8003830 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800381e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2228      	movs	r2, #40	; 0x28
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800382e:	e007      	b.n	8003840 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003840:	6978      	ldr	r0, [r7, #20]
 8003842:	f7fd fac3 	bl	8000dcc <HAL_I2C_ErrorCallback>
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000050 	.word	0x20000050
 8003854:	14f8b589 	.word	0x14f8b589

08003858 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	0a1a      	lsrs	r2, r3, #8
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b01      	subs	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e008      	b.n	80038a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a4:	d0e9      	beq.n	800387a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20000050 	.word	0x20000050
 80038b8:	14f8b589 	.word	0x14f8b589

080038bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80038cc:	d103      	bne.n	80038d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80038d4:	e007      	b.n	80038e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038de:	d102      	bne.n	80038e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2208      	movs	r2, #8
 80038e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e267      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d075      	beq.n	80039fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003912:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d00c      	beq.n	8003938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b85      	ldr	r3, [pc, #532]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d112      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003936:	d10b      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	4b7e      	ldr	r3, [pc, #504]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05b      	beq.n	80039fc <HAL_RCC_OscConfig+0x108>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d157      	bne.n	80039fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e242      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x74>
 800395a:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a75      	ldr	r2, [pc, #468]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x98>
 8003972:	4b70      	ldr	r3, [pc, #448]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6f      	ldr	r2, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b6d      	ldr	r3, [pc, #436]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6c      	ldr	r2, [pc, #432]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 800398c:	4b69      	ldr	r3, [pc, #420]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a68      	ldr	r2, [pc, #416]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a65      	ldr	r2, [pc, #404]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fcd0 	bl	8001350 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fd fccc 	bl	8001350 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e207      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xc0>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fd fcbc 	bl	8001350 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fd fcb8 	bl	8001350 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1f3      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0xe8>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b44      	ldr	r3, [pc, #272]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1c7      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4937      	ldr	r1, [pc, #220]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd fc71 	bl	8001350 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fd fc6d 	bl	8001350 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1a8      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4925      	ldr	r1, [pc, #148]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd fc50 	bl	8001350 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fd fc4c 	bl	8001350 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e187      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d036      	beq.n	8003b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fd fc30 	bl	8001350 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fd fc2c 	bl	8001350 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e167      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x200>
 8003b12:	e01b      	b.n	8003b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fd fc19 	bl	8001350 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	e00e      	b.n	8003b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fd fc15 	bl	8001350 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d907      	bls.n	8003b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e150      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	42470000 	.word	0x42470000
 8003b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ea      	bne.n	8003b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8097 	beq.w	8003c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b7d      	ldr	r3, [pc, #500]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a7c      	ldr	r2, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d118      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b74      	ldr	r3, [pc, #464]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a73      	ldr	r2, [pc, #460]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fd fbd5 	bl	8001350 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fd fbd1 	bl	8001350 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e10c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x2ea>
 8003bd0:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x30c>
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a5b      	ldr	r2, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003c00:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	4b55      	ldr	r3, [pc, #340]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a54      	ldr	r2, [pc, #336]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f023 0304 	bic.w	r3, r3, #4
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd fb96 	bl	8001350 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fd fb92 	bl	8001350 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0cb      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ee      	beq.n	8003c28 <HAL_RCC_OscConfig+0x334>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4c:	f7fd fb80 	bl	8001350 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fd fb7c 	bl	8001350 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e0b5      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ee      	bne.n	8003c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	4a38      	ldr	r2, [pc, #224]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a1 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d05c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d141      	bne.n	8003d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fd fb50 	bl	8001350 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fd fb4c 	bl	8001350 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e087      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	491b      	ldr	r1, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fd fb25 	bl	8001350 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fd fb21 	bl	8001350 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e05c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x416>
 8003d28:	e054      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fd fb0e 	bl	8001350 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fd fb0a 	bl	8001350 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e045      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x444>
 8003d56:	e03d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e038      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x4ec>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d121      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d11a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0cc      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d90c      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e50:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	494d      	ldr	r1, [pc, #308]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d044      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d119      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e067      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4934      	ldr	r1, [pc, #208]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed4:	f7fd fa3c 	bl	8001350 <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fd fa38 	bl	8001350 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e04f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 020c 	and.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1eb      	bne.n	8003edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d20c      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e032      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4916      	ldr	r1, [pc, #88]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 f821 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd f99c 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023c00 	.word	0x40023c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	080057f4 	.word	0x080057f4
 8003fa8:	20000050 	.word	0x20000050
 8003fac:	20000054 	.word	0x20000054

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b090      	sub	sp, #64	; 0x40
 8003fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc8:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	f200 80a1 	bhi.w	800411c <HAL_RCC_GetSysClockFreq+0x16c>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe2:	e09b      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fe6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fe8:	e09b      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fea:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fee:	e098      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff0:	4b4f      	ldr	r3, [pc, #316]	; (8004130 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffa:	4b4d      	ldr	r3, [pc, #308]	; (8004130 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d028      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004006:	4b4a      	ldr	r3, [pc, #296]	; (8004130 <HAL_RCC_GetSysClockFreq+0x180>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	2200      	movs	r2, #0
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	627a      	str	r2, [r7, #36]	; 0x24
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004018:	2100      	movs	r1, #0
 800401a:	4b47      	ldr	r3, [pc, #284]	; (8004138 <HAL_RCC_GetSysClockFreq+0x188>)
 800401c:	fb03 f201 	mul.w	r2, r3, r1
 8004020:	2300      	movs	r3, #0
 8004022:	fb00 f303 	mul.w	r3, r0, r3
 8004026:	4413      	add	r3, r2
 8004028:	4a43      	ldr	r2, [pc, #268]	; (8004138 <HAL_RCC_GetSysClockFreq+0x188>)
 800402a:	fba0 1202 	umull	r1, r2, r0, r2
 800402e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004030:	460a      	mov	r2, r1
 8004032:	62ba      	str	r2, [r7, #40]	; 0x28
 8004034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004036:	4413      	add	r3, r2
 8004038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	2200      	movs	r2, #0
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	61fa      	str	r2, [r7, #28]
 8004042:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004046:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800404a:	f7fc f8bd 	bl	80001c8 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4613      	mov	r3, r2
 8004054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004056:	e053      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004058:	4b35      	ldr	r3, [pc, #212]	; (8004130 <HAL_RCC_GetSysClockFreq+0x180>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	2200      	movs	r2, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	617a      	str	r2, [r7, #20]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800406a:	f04f 0b00 	mov.w	fp, #0
 800406e:	4652      	mov	r2, sl
 8004070:	465b      	mov	r3, fp
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	0159      	lsls	r1, r3, #5
 800407c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004080:	0150      	lsls	r0, r2, #5
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	ebb2 080a 	subs.w	r8, r2, sl
 800408a:	eb63 090b 	sbc.w	r9, r3, fp
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800409a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800409e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040a2:	ebb2 0408 	subs.w	r4, r2, r8
 80040a6:	eb63 0509 	sbc.w	r5, r3, r9
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	00eb      	lsls	r3, r5, #3
 80040b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b8:	00e2      	lsls	r2, r4, #3
 80040ba:	4614      	mov	r4, r2
 80040bc:	461d      	mov	r5, r3
 80040be:	eb14 030a 	adds.w	r3, r4, sl
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	eb45 030b 	adc.w	r3, r5, fp
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d6:	4629      	mov	r1, r5
 80040d8:	028b      	lsls	r3, r1, #10
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e0:	4621      	mov	r1, r4
 80040e2:	028a      	lsls	r2, r1, #10
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	2200      	movs	r2, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	60fa      	str	r2, [r7, #12]
 80040f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f4:	f7fc f868 	bl	80001c8 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_GetSysClockFreq+0x180>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800411a:	e002      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetSysClockFreq+0x184>)
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004124:	4618      	mov	r0, r3
 8004126:	3740      	adds	r7, #64	; 0x40
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	00f42400 	.word	0x00f42400
 8004138:	017d7840 	.word	0x017d7840

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <HAL_RCC_GetHCLKFreq+0x14>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000050 	.word	0x20000050

08004154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004158:	f7ff fff0 	bl	800413c <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	0a9b      	lsrs	r3, r3, #10
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	08005804 	.word	0x08005804

0800417c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004180:	f7ff ffdc 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0b5b      	lsrs	r3, r3, #13
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	08005804 	.word	0x08005804

080041a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e041      	b.n	800423a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fc ff26 	bl	800101c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f000 fb4a 	bl	800487c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d001      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e04e      	b.n	80042fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a23      	ldr	r2, [pc, #140]	; (8004308 <HAL_TIM_Base_Start_IT+0xc4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d022      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d01d      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1f      	ldr	r2, [pc, #124]	; (800430c <HAL_TIM_Base_Start_IT+0xc8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d018      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1e      	ldr	r2, [pc, #120]	; (8004310 <HAL_TIM_Base_Start_IT+0xcc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <HAL_TIM_Base_Start_IT+0xd0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00e      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d009      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_TIM_Base_Start_IT+0xd8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_TIM_Base_Start_IT+0xdc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d111      	bne.n	80042e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d010      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e6:	e007      	b.n	80042f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40010400 	.word	0x40010400
 800431c:	40014000 	.word	0x40014000
 8004320:	40001800 	.word	0x40001800

08004324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e041      	b.n	80043ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f839 	bl	80043c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 fa8a 	bl	800487c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start+0x24>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e022      	b.n	8004442 <HAL_TIM_PWM_Start+0x6a>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d109      	bne.n	8004416 <HAL_TIM_PWM_Start+0x3e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e015      	b.n	8004442 <HAL_TIM_PWM_Start+0x6a>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d109      	bne.n	8004430 <HAL_TIM_PWM_Start+0x58>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e008      	b.n	8004442 <HAL_TIM_PWM_Start+0x6a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e07c      	b.n	8004544 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0x82>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004458:	e013      	b.n	8004482 <HAL_TIM_PWM_Start+0xaa>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0x92>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004468:	e00b      	b.n	8004482 <HAL_TIM_PWM_Start+0xaa>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0xa2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004478:	e003      	b.n	8004482 <HAL_TIM_PWM_Start+0xaa>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2201      	movs	r2, #1
 8004488:	6839      	ldr	r1, [r7, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fce0 	bl	8004e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2d      	ldr	r2, [pc, #180]	; (800454c <HAL_TIM_PWM_Start+0x174>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_TIM_PWM_Start+0xcc>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <HAL_TIM_PWM_Start+0x178>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d101      	bne.n	80044a8 <HAL_TIM_PWM_Start+0xd0>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <HAL_TIM_PWM_Start+0xd2>
 80044a8:	2300      	movs	r3, #0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a22      	ldr	r2, [pc, #136]	; (800454c <HAL_TIM_PWM_Start+0x174>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <HAL_TIM_PWM_Start+0x136>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d01d      	beq.n	800450e <HAL_TIM_PWM_Start+0x136>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <HAL_TIM_PWM_Start+0x17c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_TIM_PWM_Start+0x136>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_TIM_PWM_Start+0x180>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_TIM_PWM_Start+0x136>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1c      	ldr	r2, [pc, #112]	; (800455c <HAL_TIM_PWM_Start+0x184>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_TIM_PWM_Start+0x136>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_TIM_PWM_Start+0x178>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIM_PWM_Start+0x136>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_TIM_PWM_Start+0x188>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIM_PWM_Start+0x136>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <HAL_TIM_PWM_Start+0x18c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d111      	bne.n	8004532 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b06      	cmp	r3, #6
 800451e:	d010      	beq.n	8004542 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004530:	e007      	b.n	8004542 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40010000 	.word	0x40010000
 8004550:	40010400 	.word	0x40010400
 8004554:	40000400 	.word	0x40000400
 8004558:	40000800 	.word	0x40000800
 800455c:	40000c00 	.word	0x40000c00
 8004560:	40014000 	.word	0x40014000
 8004564:	40001800 	.word	0x40001800

08004568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004582:	2302      	movs	r3, #2
 8004584:	e0ae      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	f200 809f 	bhi.w	80046d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	080046d5 	.word	0x080046d5
 80045a4:	080046d5 	.word	0x080046d5
 80045a8:	080046d5 	.word	0x080046d5
 80045ac:	08004611 	.word	0x08004611
 80045b0:	080046d5 	.word	0x080046d5
 80045b4:	080046d5 	.word	0x080046d5
 80045b8:	080046d5 	.word	0x080046d5
 80045bc:	08004653 	.word	0x08004653
 80045c0:	080046d5 	.word	0x080046d5
 80045c4:	080046d5 	.word	0x080046d5
 80045c8:	080046d5 	.word	0x080046d5
 80045cc:	08004693 	.word	0x08004693
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f9f0 	bl	80049bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0208 	orr.w	r2, r2, #8
 80045ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0204 	bic.w	r2, r2, #4
 80045fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6999      	ldr	r1, [r3, #24]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	619a      	str	r2, [r3, #24]
      break;
 800460e:	e064      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fa40 	bl	8004a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6999      	ldr	r1, [r3, #24]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	021a      	lsls	r2, r3, #8
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	619a      	str	r2, [r3, #24]
      break;
 8004650:	e043      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fa95 	bl	8004b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0208 	orr.w	r2, r2, #8
 800466c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0204 	bic.w	r2, r2, #4
 800467c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69d9      	ldr	r1, [r3, #28]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	61da      	str	r2, [r3, #28]
      break;
 8004690:	e023      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fae9 	bl	8004c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69d9      	ldr	r1, [r3, #28]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	021a      	lsls	r2, r3, #8
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	61da      	str	r2, [r3, #28]
      break;
 80046d2:	e002      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
      break;
 80046d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIM_ConfigClockSource+0x1c>
 8004704:	2302      	movs	r3, #2
 8004706:	e0b4      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x186>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800472e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004740:	d03e      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004746:	f200 8087 	bhi.w	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	f000 8086 	beq.w	800485e <HAL_TIM_ConfigClockSource+0x172>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	d87f      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b70      	cmp	r3, #112	; 0x70
 800475a:	d01a      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0xa6>
 800475c:	2b70      	cmp	r3, #112	; 0x70
 800475e:	d87b      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b60      	cmp	r3, #96	; 0x60
 8004762:	d050      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x11a>
 8004764:	2b60      	cmp	r3, #96	; 0x60
 8004766:	d877      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b50      	cmp	r3, #80	; 0x50
 800476a:	d03c      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xfa>
 800476c:	2b50      	cmp	r3, #80	; 0x50
 800476e:	d873      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d058      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x13a>
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d86f      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b30      	cmp	r3, #48	; 0x30
 800477a:	d064      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b30      	cmp	r3, #48	; 0x30
 800477e:	d86b      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d060      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b20      	cmp	r3, #32
 8004786:	d867      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d05c      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b10      	cmp	r3, #16
 800478e:	d05a      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	e062      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6899      	ldr	r1, [r3, #8]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f000 fb35 	bl	8004e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	609a      	str	r2, [r3, #8]
      break;
 80047be:	e04f      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6899      	ldr	r1, [r3, #8]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f000 fb1e 	bl	8004e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e2:	609a      	str	r2, [r3, #8]
      break;
 80047e4:	e03c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6859      	ldr	r1, [r3, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f000 fa92 	bl	8004d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2150      	movs	r1, #80	; 0x50
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 faeb 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 8004804:	e02c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6859      	ldr	r1, [r3, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	461a      	mov	r2, r3
 8004814:	f000 fab1 	bl	8004d7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2160      	movs	r1, #96	; 0x60
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fadb 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 8004824:	e01c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	461a      	mov	r2, r3
 8004834:	f000 fa72 	bl	8004d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2140      	movs	r1, #64	; 0x40
 800483e:	4618      	mov	r0, r3
 8004840:	f000 facb 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 8004844:	e00c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f000 fac2 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 8004856:	e003      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e000      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800485e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a40      	ldr	r2, [pc, #256]	; (8004990 <TIM_Base_SetConfig+0x114>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d00f      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a3d      	ldr	r2, [pc, #244]	; (8004994 <TIM_Base_SetConfig+0x118>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00b      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <TIM_Base_SetConfig+0x11c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3b      	ldr	r2, [pc, #236]	; (800499c <TIM_Base_SetConfig+0x120>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3a      	ldr	r2, [pc, #232]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d108      	bne.n	80048ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <TIM_Base_SetConfig+0x114>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d02b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d027      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <TIM_Base_SetConfig+0x118>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d023      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <TIM_Base_SetConfig+0x11c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01f      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <TIM_Base_SetConfig+0x120>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d017      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <TIM_Base_SetConfig+0x128>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <TIM_Base_SetConfig+0x12c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00f      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a26      	ldr	r2, [pc, #152]	; (80049ac <TIM_Base_SetConfig+0x130>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <TIM_Base_SetConfig+0x134>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <TIM_Base_SetConfig+0x138>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <TIM_Base_SetConfig+0x13c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0xf8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d103      	bne.n	800497c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	615a      	str	r2, [r3, #20]
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800
 80049b0:	40001800 	.word	0x40001800
 80049b4:	40001c00 	.word	0x40001c00
 80049b8:	40002000 	.word	0x40002000

080049bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f023 0201 	bic.w	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0302 	bic.w	r3, r3, #2
 8004a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <TIM_OC1_SetConfig+0xd8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC1_SetConfig+0x64>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <TIM_OC1_SetConfig+0xdc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10c      	bne.n	8004a3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0308 	bic.w	r3, r3, #8
 8004a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <TIM_OC1_SetConfig+0xd8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_OC1_SetConfig+0x8e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a14      	ldr	r2, [pc, #80]	; (8004a98 <TIM_OC1_SetConfig+0xdc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d111      	bne.n	8004a6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40010400 	.word	0x40010400

08004a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0210 	bic.w	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0320 	bic.w	r3, r3, #32
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <TIM_OC2_SetConfig+0xe4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC2_SetConfig+0x68>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a21      	ldr	r2, [pc, #132]	; (8004b84 <TIM_OC2_SetConfig+0xe8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10d      	bne.n	8004b20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <TIM_OC2_SetConfig+0xe4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_OC2_SetConfig+0x94>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <TIM_OC2_SetConfig+0xe8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d113      	bne.n	8004b58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40010400 	.word	0x40010400

08004b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <TIM_OC3_SetConfig+0xe0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_OC3_SetConfig+0x66>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <TIM_OC3_SetConfig+0xe4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d10d      	bne.n	8004c0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <TIM_OC3_SetConfig+0xe0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC3_SetConfig+0x92>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <TIM_OC3_SetConfig+0xe4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d113      	bne.n	8004c42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010400 	.word	0x40010400

08004c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a12      	ldr	r2, [pc, #72]	; (8004d14 <TIM_OC4_SetConfig+0xa4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x68>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <TIM_OC4_SetConfig+0xa8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d109      	bne.n	8004cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	019b      	lsls	r3, r3, #6
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40010400 	.word	0x40010400

08004d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0201 	bic.w	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 030a 	bic.w	r3, r3, #10
 8004d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b087      	sub	sp, #28
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0210 	bic.w	r2, r3, #16
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004db6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f043 0307 	orr.w	r3, r3, #7
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	609a      	str	r2, [r3, #8]
}
 8004e04:	bf00      	nop
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	021a      	lsls	r2, r3, #8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	609a      	str	r2, [r3, #8]
}
 8004e44:	bf00      	nop
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	2201      	movs	r2, #1
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a1a      	ldr	r2, [r3, #32]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	43db      	mvns	r3, r3
 8004e72:	401a      	ands	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e05a      	b.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a21      	ldr	r2, [pc, #132]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d022      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f00:	d01d      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d018      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00e      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d009      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d10c      	bne.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40001800 	.word	0x40001800

08004f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e03f      	b.n	8005026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fc f8a0 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2224      	movs	r2, #36	; 0x24
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f929 	bl	8005230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800500c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b08a      	sub	sp, #40	; 0x28
 8005032:	af02      	add	r7, sp, #8
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	603b      	str	r3, [r7, #0]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b20      	cmp	r3, #32
 800504c:	d17c      	bne.n	8005148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_UART_Transmit+0x2c>
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e075      	b.n	800514a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_UART_Transmit+0x3e>
 8005068:	2302      	movs	r3, #2
 800506a:	e06e      	b.n	800514a <HAL_UART_Transmit+0x11c>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2221      	movs	r2, #33	; 0x21
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005082:	f7fc f965 	bl	8001350 <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509c:	d108      	bne.n	80050b0 <HAL_UART_Transmit+0x82>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d104      	bne.n	80050b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e003      	b.n	80050b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050c0:	e02a      	b.n	8005118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f840 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e036      	b.n	800514a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3302      	adds	r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e007      	b.n	800510a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1cf      	bne.n	80050c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	2140      	movs	r1, #64	; 0x40
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f810 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e006      	b.n	800514a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e000      	b.n	800514a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b090      	sub	sp, #64	; 0x40
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005162:	e050      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d04c      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800516c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0x30>
 8005172:	f7fc f8ed 	bl	8001350 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800517e:	429a      	cmp	r2, r3
 8005180:	d241      	bcs.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051a2:	637a      	str	r2, [r7, #52]	; 0x34
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3314      	adds	r3, #20
 80051bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	613b      	str	r3, [r7, #16]
   return(result);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d6:	623a      	str	r2, [r7, #32]
 80051d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	69f9      	ldr	r1, [r7, #28]
 80051dc:	6a3a      	ldr	r2, [r7, #32]
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e5      	bne.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e00f      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	429a      	cmp	r2, r3
 8005222:	d09f      	beq.n	8005164 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3740      	adds	r7, #64	; 0x40
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005234:	b0c0      	sub	sp, #256	; 0x100
 8005236:	af00      	add	r7, sp, #0
 8005238:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	68d9      	ldr	r1, [r3, #12]
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	ea40 0301 	orr.w	r3, r0, r1
 8005258:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	431a      	orrs	r2, r3
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	431a      	orrs	r2, r3
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005288:	f021 010c 	bic.w	r1, r1, #12
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005296:	430b      	orrs	r3, r1
 8005298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	6999      	ldr	r1, [r3, #24]
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	ea40 0301 	orr.w	r3, r0, r1
 80052b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b8f      	ldr	r3, [pc, #572]	; (80054fc <UART_SetConfig+0x2cc>)
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d005      	beq.n	80052d0 <UART_SetConfig+0xa0>
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b8d      	ldr	r3, [pc, #564]	; (8005500 <UART_SetConfig+0x2d0>)
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d104      	bne.n	80052da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fe ff54 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 80052d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052d8:	e003      	b.n	80052e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052da:	f7fe ff3b 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 80052de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ec:	f040 810c 	bne.w	8005508 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005302:	4622      	mov	r2, r4
 8005304:	462b      	mov	r3, r5
 8005306:	1891      	adds	r1, r2, r2
 8005308:	65b9      	str	r1, [r7, #88]	; 0x58
 800530a:	415b      	adcs	r3, r3
 800530c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800530e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005312:	4621      	mov	r1, r4
 8005314:	eb12 0801 	adds.w	r8, r2, r1
 8005318:	4629      	mov	r1, r5
 800531a:	eb43 0901 	adc.w	r9, r3, r1
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800532a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800532e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005332:	4690      	mov	r8, r2
 8005334:	4699      	mov	r9, r3
 8005336:	4623      	mov	r3, r4
 8005338:	eb18 0303 	adds.w	r3, r8, r3
 800533c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005340:	462b      	mov	r3, r5
 8005342:	eb49 0303 	adc.w	r3, r9, r3
 8005346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005356:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800535a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800535e:	460b      	mov	r3, r1
 8005360:	18db      	adds	r3, r3, r3
 8005362:	653b      	str	r3, [r7, #80]	; 0x50
 8005364:	4613      	mov	r3, r2
 8005366:	eb42 0303 	adc.w	r3, r2, r3
 800536a:	657b      	str	r3, [r7, #84]	; 0x54
 800536c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005370:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005374:	f7fa ff28 	bl	80001c8 <__aeabi_uldivmod>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4b61      	ldr	r3, [pc, #388]	; (8005504 <UART_SetConfig+0x2d4>)
 800537e:	fba3 2302 	umull	r2, r3, r3, r2
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	011c      	lsls	r4, r3, #4
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005390:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005394:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	1891      	adds	r1, r2, r2
 800539e:	64b9      	str	r1, [r7, #72]	; 0x48
 80053a0:	415b      	adcs	r3, r3
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053a8:	4641      	mov	r1, r8
 80053aa:	eb12 0a01 	adds.w	sl, r2, r1
 80053ae:	4649      	mov	r1, r9
 80053b0:	eb43 0b01 	adc.w	fp, r3, r1
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053c8:	4692      	mov	sl, r2
 80053ca:	469b      	mov	fp, r3
 80053cc:	4643      	mov	r3, r8
 80053ce:	eb1a 0303 	adds.w	r3, sl, r3
 80053d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053d6:	464b      	mov	r3, r9
 80053d8:	eb4b 0303 	adc.w	r3, fp, r3
 80053dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053f4:	460b      	mov	r3, r1
 80053f6:	18db      	adds	r3, r3, r3
 80053f8:	643b      	str	r3, [r7, #64]	; 0x40
 80053fa:	4613      	mov	r3, r2
 80053fc:	eb42 0303 	adc.w	r3, r2, r3
 8005400:	647b      	str	r3, [r7, #68]	; 0x44
 8005402:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005406:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800540a:	f7fa fedd 	bl	80001c8 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4611      	mov	r1, r2
 8005414:	4b3b      	ldr	r3, [pc, #236]	; (8005504 <UART_SetConfig+0x2d4>)
 8005416:	fba3 2301 	umull	r2, r3, r3, r1
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2264      	movs	r2, #100	; 0x64
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	1acb      	subs	r3, r1, r3
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800542a:	4b36      	ldr	r3, [pc, #216]	; (8005504 <UART_SetConfig+0x2d4>)
 800542c:	fba3 2302 	umull	r2, r3, r3, r2
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005438:	441c      	add	r4, r3
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543e:	2200      	movs	r2, #0
 8005440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005444:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005448:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	1891      	adds	r1, r2, r2
 8005452:	63b9      	str	r1, [r7, #56]	; 0x38
 8005454:	415b      	adcs	r3, r3
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800545c:	4641      	mov	r1, r8
 800545e:	1851      	adds	r1, r2, r1
 8005460:	6339      	str	r1, [r7, #48]	; 0x30
 8005462:	4649      	mov	r1, r9
 8005464:	414b      	adcs	r3, r1
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005474:	4659      	mov	r1, fp
 8005476:	00cb      	lsls	r3, r1, #3
 8005478:	4651      	mov	r1, sl
 800547a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547e:	4651      	mov	r1, sl
 8005480:	00ca      	lsls	r2, r1, #3
 8005482:	4610      	mov	r0, r2
 8005484:	4619      	mov	r1, r3
 8005486:	4603      	mov	r3, r0
 8005488:	4642      	mov	r2, r8
 800548a:	189b      	adds	r3, r3, r2
 800548c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005490:	464b      	mov	r3, r9
 8005492:	460a      	mov	r2, r1
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054b0:	460b      	mov	r3, r1
 80054b2:	18db      	adds	r3, r3, r3
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b6:	4613      	mov	r3, r2
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054c6:	f7fa fe7f 	bl	80001c8 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <UART_SetConfig+0x2d4>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	; 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	3332      	adds	r3, #50	; 0x32
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <UART_SetConfig+0x2d4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 0207 	and.w	r2, r3, #7
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4422      	add	r2, r4
 80054f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f8:	e106      	b.n	8005708 <UART_SetConfig+0x4d8>
 80054fa:	bf00      	nop
 80054fc:	40011000 	.word	0x40011000
 8005500:	40011400 	.word	0x40011400
 8005504:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005512:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005516:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800551a:	4642      	mov	r2, r8
 800551c:	464b      	mov	r3, r9
 800551e:	1891      	adds	r1, r2, r2
 8005520:	6239      	str	r1, [r7, #32]
 8005522:	415b      	adcs	r3, r3
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
 8005526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800552a:	4641      	mov	r1, r8
 800552c:	1854      	adds	r4, r2, r1
 800552e:	4649      	mov	r1, r9
 8005530:	eb43 0501 	adc.w	r5, r3, r1
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	00eb      	lsls	r3, r5, #3
 800553e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005542:	00e2      	lsls	r2, r4, #3
 8005544:	4614      	mov	r4, r2
 8005546:	461d      	mov	r5, r3
 8005548:	4643      	mov	r3, r8
 800554a:	18e3      	adds	r3, r4, r3
 800554c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005550:	464b      	mov	r3, r9
 8005552:	eb45 0303 	adc.w	r3, r5, r3
 8005556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005566:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005576:	4629      	mov	r1, r5
 8005578:	008b      	lsls	r3, r1, #2
 800557a:	4621      	mov	r1, r4
 800557c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005580:	4621      	mov	r1, r4
 8005582:	008a      	lsls	r2, r1, #2
 8005584:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005588:	f7fa fe1e 	bl	80001c8 <__aeabi_uldivmod>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4b60      	ldr	r3, [pc, #384]	; (8005714 <UART_SetConfig+0x4e4>)
 8005592:	fba3 2302 	umull	r2, r3, r3, r2
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	011c      	lsls	r4, r3, #4
 800559a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055ac:	4642      	mov	r2, r8
 80055ae:	464b      	mov	r3, r9
 80055b0:	1891      	adds	r1, r2, r2
 80055b2:	61b9      	str	r1, [r7, #24]
 80055b4:	415b      	adcs	r3, r3
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055bc:	4641      	mov	r1, r8
 80055be:	1851      	adds	r1, r2, r1
 80055c0:	6139      	str	r1, [r7, #16]
 80055c2:	4649      	mov	r1, r9
 80055c4:	414b      	adcs	r3, r1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055d4:	4659      	mov	r1, fp
 80055d6:	00cb      	lsls	r3, r1, #3
 80055d8:	4651      	mov	r1, sl
 80055da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055de:	4651      	mov	r1, sl
 80055e0:	00ca      	lsls	r2, r1, #3
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	4642      	mov	r2, r8
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055f0:	464b      	mov	r3, r9
 80055f2:	460a      	mov	r2, r1
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	67bb      	str	r3, [r7, #120]	; 0x78
 8005606:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005614:	4649      	mov	r1, r9
 8005616:	008b      	lsls	r3, r1, #2
 8005618:	4641      	mov	r1, r8
 800561a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561e:	4641      	mov	r1, r8
 8005620:	008a      	lsls	r2, r1, #2
 8005622:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005626:	f7fa fdcf 	bl	80001c8 <__aeabi_uldivmod>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4611      	mov	r1, r2
 8005630:	4b38      	ldr	r3, [pc, #224]	; (8005714 <UART_SetConfig+0x4e4>)
 8005632:	fba3 2301 	umull	r2, r3, r3, r1
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	2264      	movs	r2, #100	; 0x64
 800563a:	fb02 f303 	mul.w	r3, r2, r3
 800563e:	1acb      	subs	r3, r1, r3
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	3332      	adds	r3, #50	; 0x32
 8005644:	4a33      	ldr	r2, [pc, #204]	; (8005714 <UART_SetConfig+0x4e4>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005650:	441c      	add	r4, r3
 8005652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005656:	2200      	movs	r2, #0
 8005658:	673b      	str	r3, [r7, #112]	; 0x70
 800565a:	677a      	str	r2, [r7, #116]	; 0x74
 800565c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005660:	4642      	mov	r2, r8
 8005662:	464b      	mov	r3, r9
 8005664:	1891      	adds	r1, r2, r2
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	415b      	adcs	r3, r3
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005670:	4641      	mov	r1, r8
 8005672:	1851      	adds	r1, r2, r1
 8005674:	6039      	str	r1, [r7, #0]
 8005676:	4649      	mov	r1, r9
 8005678:	414b      	adcs	r3, r1
 800567a:	607b      	str	r3, [r7, #4]
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005688:	4659      	mov	r1, fp
 800568a:	00cb      	lsls	r3, r1, #3
 800568c:	4651      	mov	r1, sl
 800568e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005692:	4651      	mov	r1, sl
 8005694:	00ca      	lsls	r2, r1, #3
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	4603      	mov	r3, r0
 800569c:	4642      	mov	r2, r8
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a2:	464b      	mov	r3, r9
 80056a4:	460a      	mov	r2, r1
 80056a6:	eb42 0303 	adc.w	r3, r2, r3
 80056aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	663b      	str	r3, [r7, #96]	; 0x60
 80056b6:	667a      	str	r2, [r7, #100]	; 0x64
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056c4:	4649      	mov	r1, r9
 80056c6:	008b      	lsls	r3, r1, #2
 80056c8:	4641      	mov	r1, r8
 80056ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ce:	4641      	mov	r1, r8
 80056d0:	008a      	lsls	r2, r1, #2
 80056d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056d6:	f7fa fd77 	bl	80001c8 <__aeabi_uldivmod>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <UART_SetConfig+0x4e4>)
 80056e0:	fba3 1302 	umull	r1, r3, r3, r2
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	2164      	movs	r1, #100	; 0x64
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	3332      	adds	r3, #50	; 0x32
 80056f2:	4a08      	ldr	r2, [pc, #32]	; (8005714 <UART_SetConfig+0x4e4>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	f003 020f 	and.w	r2, r3, #15
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4422      	add	r2, r4
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800570e:	46bd      	mov	sp, r7
 8005710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005714:	51eb851f 	.word	0x51eb851f

08005718 <memset>:
 8005718:	4402      	add	r2, r0
 800571a:	4603      	mov	r3, r0
 800571c:	4293      	cmp	r3, r2
 800571e:	d100      	bne.n	8005722 <memset+0xa>
 8005720:	4770      	bx	lr
 8005722:	f803 1b01 	strb.w	r1, [r3], #1
 8005726:	e7f9      	b.n	800571c <memset+0x4>

08005728 <__libc_init_array>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	4d0d      	ldr	r5, [pc, #52]	; (8005760 <__libc_init_array+0x38>)
 800572c:	4c0d      	ldr	r4, [pc, #52]	; (8005764 <__libc_init_array+0x3c>)
 800572e:	1b64      	subs	r4, r4, r5
 8005730:	10a4      	asrs	r4, r4, #2
 8005732:	2600      	movs	r6, #0
 8005734:	42a6      	cmp	r6, r4
 8005736:	d109      	bne.n	800574c <__libc_init_array+0x24>
 8005738:	4d0b      	ldr	r5, [pc, #44]	; (8005768 <__libc_init_array+0x40>)
 800573a:	4c0c      	ldr	r4, [pc, #48]	; (800576c <__libc_init_array+0x44>)
 800573c:	f000 f818 	bl	8005770 <_init>
 8005740:	1b64      	subs	r4, r4, r5
 8005742:	10a4      	asrs	r4, r4, #2
 8005744:	2600      	movs	r6, #0
 8005746:	42a6      	cmp	r6, r4
 8005748:	d105      	bne.n	8005756 <__libc_init_array+0x2e>
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005750:	4798      	blx	r3
 8005752:	3601      	adds	r6, #1
 8005754:	e7ee      	b.n	8005734 <__libc_init_array+0xc>
 8005756:	f855 3b04 	ldr.w	r3, [r5], #4
 800575a:	4798      	blx	r3
 800575c:	3601      	adds	r6, #1
 800575e:	e7f2      	b.n	8005746 <__libc_init_array+0x1e>
 8005760:	08005814 	.word	0x08005814
 8005764:	08005814 	.word	0x08005814
 8005768:	08005814 	.word	0x08005814
 800576c:	08005818 	.word	0x08005818

08005770 <_init>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr

0800577c <_fini>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr
